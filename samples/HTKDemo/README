                     HTK Demonstration
                     =================

This directory contains the data files, auxiliary files and perl
script for simple demonstrations of HTK These demonstrations should
also be used to test new installations of HTK.

Directory Contents
------------------

This directory includes the following files and directories.  .

   a) this README file and a version README.NT with instructions for
      use wit Windows NT.
   
   b) a directory called 'tidata' which contains 7 training sentences
      (tr*) and 3 test sentences (te*) all by the same speaker taken
      from the TIMIT prototype database. For each sentence there is a
      waveform file (.adc) and a transcription (.phn).
      
   c) a directory called 'edfiles' which contains...

      An HLEd edit script called 'edlabs.led' . This script converts
      the TIMIT transcription files to broad class transcription files
      in which just the following broad class phones are distinguished
      
         C - consonant, V - vowel, N - nasal, 
         L - liquid, S - silence
      
      Various HLEd edit scripts which can be used to convert the basic
      broad class transcriptions to context-dependent versions of
      those transcriptions.

      Various HHEd edit scripts used to produce different
      configurations of shared parameter models and to convert
      monophones to triphones.
      
   d) a directory called 'networks' which contains...

      A lattice definition file called 'monLattice' for testing broad
      class HMMs.

      Three lattice definition files called 'lbiLattice','rbiLattice'
      and 'triLattice' for testing broad class left biphones, right
      biphones and triphones respectively.
   
   e) a directory called 'data' which contains sub-directories into
      which parameterised versions of the TIMIT data will be placed.

   f) a directory called 'lists' which contains various files listing
      models, vocabulary, training & test data etc.

   g) a directory called 'protoconfs' containing the configuration
      files required by MakeProtoHMMSet.

   h) a directory called 'configs' which contains example demo
      configuration files.

   i) a directory called 'results' which contains results files for
      each of the demo configurations found in the 'configs'
      directory.

   j) a directory called 'labels' which contains sub-directories into
      which HTK format label files for both monophones and context
      dependent phones are placed.

   k) a directory called 'toolconfs' which contains configuration
      files for each HTK tool used in this demo.

   l) a file called 'outaudio' which contains the recognition output
      generated by HVite running in direct audion mode.

   m) A perl script called 'runDemo', which is invoked to run this
      demo.

   n) A perl script called 'runDemo.pl', for use on Windows NT

This directory does not include the following empty directories 
you MUST create to run HTK Demo.

   a) a directory called 'accs' which contains sub-directories into
      which accumulator files produced by HERest running in parallel
      mode will be dumped.

   b) a directory called 'hmms' which contains sub-directories, 
      'hmm.0', 'hmm.1', 'hmm.2', 'hmm.3', 'tmp' into which hmms 
      at various stages of training will be placed.

   c) a directory called 'proto' into which the script MakeProtoHMMSet
      puts the required prototype HMMSet.

   d) a directory called 'test' into which recognition files produced
      by HVite are placed.

Running The Demo
----------------

The operation of this demo is controlled by parameters set in a demo
configuration file (dcf). The format of this file is given in the file
'DcfFormat' contained in the 'configs' directory. It would be useful
to view that file whilst reading the rest of this README.

The dcf is designed to be flexible and allow the user to train and
test a wide variety of HMM configurations.

As mentioned in sections k and l above the directory 'configs'
contains a number of example dcfs which produce a variety of monophone
and triphone HMM systems. The directory 'results' contains the
recognition results obtained with each system. Each dcf has a comment
field in it describing the system which it produces.

In all of the example scripts, tools to perform data preparation,
training and recognition are invoked. If the user is interested only
in the operation of one tool or a subset of tools then this can be
achieved by editing the dcf.


To run the demo invoke the script 'runDemo' contained in the 'HTKDemo'
directory supplying a demo configuration file as an argument.

For example to produce a single mixture, three stream monophone system
type

     $ cd HTKDemo
     $ ./runDemo configs/monPlainM1S3.dcf

As the script runs the user will be prompted if the target directory
for any process is not empty e.g.

     labels/bcplabs/tri not empty, overwrite using HLEd Y/N?:

This allows the user to skip over parts of the demo when performing
repeated runs.

                     Points To Note
                     --------------
1. Not all combinations of configuration parameters are allowed. For
   example there is not enough training data to train either full
   covariance or multiple mixture triphones.

2. When generating a context dependent system (Context: T,L or R in
   the dcf) the user will see the prompt.

      Has the appropriate monophone system been generated Y/N?:

   Only answer Y to this if the appropriate monophone system, for the
   context dependent system requested, exists in all stages of
   training. Answering N causes the correct monophone system to be
   built.

3. When generating a TIED or a SHARED context dependent system
   (hsKind: T or S in the dcf) a PLAIN context dependent system will
   be generated first.

4. When re-estimating context dependent models you will see warnings
   like.

      HERest: WARNING [-2331]
        UpdateModels: V-V+C[24] copied: only 1 egs
   
   This simply means that the triphone V-V+C only occurred once in the
   training data and hence HERest was unable to re-estimate the model
   parameters.

5. The coding of data is different for the cases of direct audio and
   file based speech recognition. An easy mistake to make with this
   demo is to run the direct audio demo and then forget to recode the
   training data for subsequent runs of file based recognition.

Dave Ollason
06/11/95
